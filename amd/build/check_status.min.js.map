{"version":3,"file":"check_status.min.js","sources":["../src/check_status.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module check_status\n *\n * @module     paygw_fawry/check_status\n * @copyright  2024 Mohammad Farouk <phun.for.physics@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Ajax from 'core/ajax';\nimport $ from 'jquery';\n\nlet successUrl;\nlet disabledTimeout;\n\n/**\n * Check the order status\n * @param {Number} orderId\n * @returns {Promise<Object>}\n */\nfunction checkStatus(orderId) {\n    let request = Ajax.call([{\n        methodname: 'paygw_fawry_check_status',\n        args: {\n            orderid: orderId\n        }\n    }]);\n    return request[0];\n}\n\n/**\n * Instant check for the order status.\n * @param {Number} orderId\n * @returns {void}\n */\nasync function instantCheck(orderId) {\n    let requests = Ajax.call([{\n        methodname: 'paygw_fawry_instant_check',\n        args: {\n            orderid: orderId\n        }\n    }]);\n    let data = await requests[0];\n    // eslint-disable-next-line no-console\n    console.log(data);\n}\n\nexport const init = (orderid = null, url = null) => {\n\n\n    if (orderid) {\n        successUrl = url;\n        var interval = setInterval(async() => {\n            let response = await checkStatus();\n            if (response.status === 'success') {\n                clearInterval(interval);\n                window.location.href = successUrl;\n            } else if (response.status === 'failed') {\n                clearInterval(interval);\n            }\n            $('[data-purpose=\"status\"]').text(response.status);\n        }, 15000);\n    }\n\n\n    let button = $('button[data-action=\"check\"]');\n    button.on('click', function() {\n        let $this = $(this); // Save reference to button\n        let orderId = $this.data(\"orderId\");\n        if (orderId) {\n            clearTimeout(disabledTimeout);\n            $this.attr('disabled', true); // Correct use of `attr`\n            instantCheck();\n            disabledTimeout = setTimeout(function() {\n                $this.attr('disabled', false); // Correct use of `attr`\n            }, 30000);\n        }\n    });\n};"],"names":["successUrl","disabledTimeout","checkStatus","orderId","Ajax","call","methodname","args","orderid","instantCheck","requests","data","console","log","url","interval","setInterval","async","response","status","clearInterval","window","location","href","text","button","on","$this","this","clearTimeout","attr","setTimeout"],"mappings":";;;;;;;SAyBIA,WACAC,yBAOKC,YAAYC,gBACHC,cAAKC,KAAK,CAAC,CACrBC,WAAY,2BACZC,KAAM,CACFC,QAASL,YAGF,kBAQJM,aAAaN,aACpBO,SAAWN,cAAKC,KAAK,CAAC,CACtBC,WAAY,4BACZC,KAAM,CACFC,QAASL,YAGbQ,WAAaD,SAAS,GAE1BE,QAAQC,IAAIF,6KAGI,eAACH,+DAAU,KAAMM,2DAAM,QAGnCN,QAAS,CACTR,WAAac,QACTC,SAAWC,aAAYC,cACnBC,eAAiBhB,cACG,YAApBgB,SAASC,QACTC,cAAcL,UACdM,OAAOC,SAASC,KAAOvB,YACI,WAApBkB,SAASC,QAChBC,cAAcL,8BAEhB,2BAA2BS,KAAKN,SAASC,UAC5C,UAIHM,QAAS,mBAAE,+BACfA,OAAOC,GAAG,SAAS,eACXC,OAAQ,mBAAEC,MACAD,MAAMhB,KAAK,aAErBkB,aAAa5B,iBACb0B,MAAMG,KAAK,YAAY,GACvBrB,eACAR,gBAAkB8B,YAAW,WACzBJ,MAAMG,KAAK,YAAY,KACxB"}