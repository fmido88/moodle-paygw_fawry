{"version":3,"file":"check_status.min.js","sources":["../src/check_status.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module check_status\n *\n * @module     paygw_fawry/check_status\n * @copyright  2024 Mohammad Farouk <phun.for.physics@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Ajax from 'core/ajax';\nimport $ from 'jquery';\n\nlet successUrl;\nlet disabledTimeout;\n\n/**\n * Check the order status\n * @param {Number} orderId\n * @returns {Promise<Object>}\n */\nfunction checkStatus(orderId) {\n    let request = Ajax.call([{\n        methodname: 'paygw_fawry_check_status',\n        args: {\n            orderid: orderId\n        }\n    }]);\n    return request[0];\n}\n\n/**\n * Instant check for the order status.\n * @param {Number} orderId\n * @returns {Promise<Object>}\n */\nasync function instantCheck(orderId) {\n    let requests = Ajax.call([{\n        methodname: 'paygw_fawry_instant_check',\n        args: {\n            orderid: orderId\n        }\n    }]);\n    let data = requests[0];\n    // eslint-disable-next-line no-console\n    console.log(await data);\n    return data;\n}\n\n/**\n * Register the instance check button in the reports table.\n */\nasync function registerInstanceCheckButton() {\n    let button = $('button[data-action=\"check-status\"]');\n    button.on('click', async function() {\n        let $this = $(this); // Save reference to button\n\n        let orderId = $this.data(\"orderid\");\n        if (orderId) {\n            clearTimeout(disabledTimeout);\n            $this.attr('disabled', true);\n            await instantCheck(orderId);\n            // Todo: Add a modal to show the new status or reload the page.\n            disabledTimeout = setTimeout(function() {\n                $this.attr('disabled', false);\n            }, 30000);\n        }\n    });\n}\n/**\n * Register the check button in process page.\n * @param {Number} orderid\n */\nasync function registerNormalCheckButton(orderid) {\n    let button = $('button[data-action=\"check-status\"]');\n    button.on('click', async function() {\n        let $this = $(this); // Save reference to button\n\n        if (orderid) {\n            clearTimeout(disabledTimeout);\n            $this.attr('disabled', true);\n            await instantCheck(orderid);\n            let response = await checkStatus(orderid);\n            if (response.status === 'success') {\n                window.location.href = successUrl;\n            } else {\n                disabledTimeout = setTimeout(function() {\n                    $this.attr('disabled', false);\n                }, 30000);\n            }\n        }\n    });\n}\n\nexport const init = (orderid = null, url = null) => {\n\n    if (orderid) {\n        successUrl = url;\n        var interval = setInterval(async function() {\n            let response = await checkStatus(orderid);\n            if (response.status === 'success') {\n                clearInterval(interval);\n                window.location.href = successUrl;\n            } else if (response.status === 'failed') {\n                clearInterval(interval);\n            }\n            $('[data-purpose=\"status\"]').text(response.status);\n        }, 15000);\n    }\n\n    if (orderid) {\n        registerNormalCheckButton();\n    } else {\n        registerInstanceCheckButton();\n    }\n\n};"],"names":["successUrl","disabledTimeout","checkStatus","orderId","Ajax","call","methodname","args","orderid","instantCheck","data","console","log","registerInstanceCheckButton","on","async","$this","this","clearTimeout","attr","setTimeout","registerNormalCheckButton","status","window","location","href","url","interval","setInterval","response","clearInterval","text"],"mappings":";;;;;;;SAyBIA,WACAC,yBAOKC,YAAYC,gBACHC,cAAKC,KAAK,CAAC,CACrBC,WAAY,2BACZC,KAAM,CACFC,QAASL,YAGF,kBAQJM,aAAaN,aAOpBO,KANWN,cAAKC,KAAK,CAAC,CACtBC,WAAY,4BACZC,KAAM,CACFC,QAASL,YAGG,UAEpBQ,QAAQC,UAAUF,MACXA,oBAMIG,+BACE,mBAAE,sCACRC,GAAG,SAASC,qBACXC,OAAQ,mBAAEC,MAEVd,QAAUa,MAAMN,KAAK,WACrBP,UACAe,aAAajB,iBACbe,MAAMG,KAAK,YAAY,SACjBV,aAAaN,SAEnBF,gBAAkBmB,YAAW,WACzBJ,MAAMG,KAAK,YAAY,KACxB,wBAQAE,0BAA0Bb,UACxB,mBAAE,sCACRM,GAAG,SAASC,qBACXC,OAAQ,mBAAEC,SAEVT,QAAS,CACTU,aAAajB,iBACbe,MAAMG,KAAK,YAAY,SACjBV,aAAaD,SAEK,mBADHN,YAAYM,UACpBc,OACTC,OAAOC,SAASC,KAAOzB,WAEvBC,gBAAkBmB,YAAW,WACzBJ,MAAMG,KAAK,YAAY,KACxB,gLAMC,eAACX,+DAAU,KAAMkB,2DAAM,QAEnClB,QAAS,CACTR,WAAa0B,QACTC,SAAWC,aAAYb,qBACnBc,eAAiB3B,YAAYM,SACT,YAApBqB,SAASP,QACTQ,cAAcH,UACdJ,OAAOC,SAASC,KAAOzB,YACI,WAApB6B,SAASP,QAChBQ,cAAcH,8BAEhB,2BAA2BI,KAAKF,SAASP,UAC5C,MAGHd,QACAa,4BAEAR"}